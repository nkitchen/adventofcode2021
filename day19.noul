#!/usr/bin/env noulith

DEBUG := 0;
TEST := 0;
import "aoc.noul";

read_scans := \inp -> (
    scans := [];
    i := null;
    for (line <- inp.lines) (
        switch (line.words)
        case '---', 'scanner', s, '---' -> (
            i = int(s);
            assert (len(scans) == i);
            scans append= [];
        )
        case [] -> null
        case [coords] -> (
            x := eval("V(" $ coords $ ")");
            scans[-1] append= x;
        );
    );
    scans
);

inv_perm := \p -> (
    q := null .* len(p);
    for (i, j <<- p)
        q[j] = i;
    q
);

permute := \x, p -> vector(for (j <- p) yield x[j]);

solve := \ -> (
    puzzle_input := if (TEST) (
        read_file("ex19.txt")
    ) else (
        read_file("in19.txt")
    );

    scans := read_scans(puzzle_input);
    xform := {};
    for (scan_i, xs <<- scans; scan_j <- (scan_i + 1) til len(scans)) (
        dprint(F"=== scanners {scan_i}, {scan_j}");

        xs' := scans[scan_j];
        ndims := len(xs[0]);
        for (p <- permutations(0 til ndims); s <- [1, (-1)] ^^ ndims) (
            s = vector(s);
            ys := xs' map (\x' -> (x' permute p) * s);

            offsets := {};
            for (x <- xs; y <- ys) (
                d := x - y;
                offsets[d] = 1 + (offsets !? d or 0);
            );
            for (d, k <<- offsets) (
                if (k >= 12) (
                    xform[[scan_i, scan_j]] = [p, s, d];

                    # x[i] = s[i] * x'[p[i]] + d[i]
                    # x[rp[j]] = s[rp[j]] * x'[j] + d[rp[j]]
                    # s[i] * s[i] == 1
                    # x[j] = s[rp[j]] * (x'[rp[j]] - d[rp[j]])
                    # x[j] = s[rp[j]] * x'[rp[j]] - s[rp[j]] * d[rp[j]]
                    rp := inv_perm(p);
                    rs := s permute rp;
                    rd := -((d * s) permute rp);
                    xform[[scan_j, scan_i]] = [rp, rs, rd];
                );
            );
        );
    );

    # Convert all the transforms to be relative to scanner 0.
    while (true) (
        changed := false;
        ks := list(xform.keys).sort;
        for (i, [u, v] <<- ks; j <- i + 1 til len(ks)) (
            u', v' := ks[j];
            p, s, d, p', s', d' := null .* 6;
            np, ns, nd := null .* 3;
            if (v == u' and not(xform !? [u, v']) and u != v') (
                p, s, d = xform[[u, v]];
                p', s', d' = xform[[u', v']];
                # x[i] = s[i] * x'[p[i]] + d[i]
                # x'[j] = s'[j] * x''[p'[j]] + d'[j]
                # x[i] = s[i] * (s'[p[i]] * x''[p'[p[i]]] + d'[p[i]]) + d[i]
                np = p' permute p;
                ns = s * (s' permute p);
                nd = s * (d' permute p) + d;
                xform[[u, v']] = [np, ns, nd];
                changed = true;
            );
        );
        if (not changed) break;
    );

    for (scan_i, scan_j <- (0 til len(scans)) ^^ 2; if (xform !? [scan_i, scan_j])) (
        dprint(F"xform to scanner {scan_i} from {scan_j}: {xform[[scan_i, scan_j]]}");
    );

    beacons := {};
    for (scan_i, xs <<- scans) (
        show := \xs' -> (
            dprint(F"== scanner {scan_i} beacons:");
            for (x' <- xs') (
                dprint(x');
            );
            dprint("");
        );

        if (scan_i == 0) (
            beacons ||= set(xs);
            show(xs);
        ) else (
            show(xs);
            p, s, d := xform[[0, scan_i]];
            ys := xs map (\x' -> (x' permute p) * s + d);
            show(ys);

            beacons ||= set(ys);
        );
    );

    print("Beacons:", len(beacons));

    scanner_dist := [];
    for (scan_i <- 0 til len(scans); scan_j <- scan_i + 1 til len(scans)) (
        scanner_dist append= (
            di := if (scan_i == 0) V(0, 0, 0) else xform[[0, scan_i]][2];
            dj := xform[[0, scan_j]][2];
            [abs(di - dj) fold +, scan_i, scan_j]
        );
    );
    print(scanner_dist fold max);
);

solve();

# 1m31s
