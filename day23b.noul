#!/usr/bin/env noulith

DEBUG := int(getenv("DEBUG") or "0");

import "aoc.noul";
import "heap.noul";

energy_per_step := {
    "A": 1,
    "B": 10,
    "C": 100,
    "D": 1000,
};

solve := \filename -> (
    # The name "map" already has a meaning.
    grid := read_file(filename).lines;

    if (getenv("PART1") == null) (
        grid = grid[:3] ++ [
            "  #D#C#B#A#",
            "  #D#B#A#C#"
        ] ++ grid[3:];
    );

    m := len(grid);
    n := len(grid[0]);
    assert(n == 13);

    # State representation: [energy, rooms, hall]
    # - energy includes both the amount spent so far and the estimate of what remains.
    # - rooms is a string with the contents of the rooms, in row-major order.
    # - hall is a string with the contents of the spaces in the hallway where
    #   amphipods can stop.

    i_hall := 1;
    j_hall := [1, 2, 4, 6, 8, 10, 11];

    i_rooms := list(2 til m - 1);
    j_rooms := [3, 5, 7, 9];
    j_goal := {
        "A": 3,
        "B": 5,
        "C": 7,
        "D": 9,
    };

    rooms_goal := "ABCD" $* len(i_rooms);

    # Map position to index in hall or room string
    idx := {};
    for (k, j <<- j_hall) (
        idx[[i_hall, j]] = k;
    );
    for (k, ij <<- i_rooms ** j_rooms) (
        idx[ij] = k;
    );

    rooms0 := "." $* len(rooms_goal);
    for (i, row <<- grid; j, c <<- grid[i]) (
        if (c in "ABCD") (
            rooms0[idx[[i, j]]] = c;
            grid[i][j] = ".";
        );
    );
    f := rooms0.frequencies.values.set;
    assert(len(f) == 1);
    if (getenv("PART1") == null) (
        assert(list(f)[0] % 4 == 0);
    );

    display := \s -> (
        energy, rooms, hall := s;
        t := "\n";
        for (i <- 0 til m) (
            for (j <- 0 til n; if j < len(grid[i])) (
                k := idx !? [i, j];
                if (k == null) (
                    t $= grid[i][j];
                ) else if (i == i_hall) (
                    t $= hall[k];
                ) else (
                    t $= rooms[k];
                )
            );
            t $= "\n";
        );
        t $= F"E: {energy}\n";
        t
    );

    estimate_energy := \rooms -> (
        e := 0;
        moved := {};
        for (j <- j_rooms; ii <- i_rooms.suffixes) (
            if (not ii) continue;

            kk := ii map (\i -> idx[[i, j]]);
            atype := rooms[kk[0]];
            i := ii[0];
            must_move := any(kk map (\k -> rooms[k] != rooms_goal[k]));
            if (must_move) (
                # Either the amphipod is in the wrong room (ii[0]) or it's in
                # the way of an amphipod deeper in (ii[1:]), which is in the
                # wrong room.
                s := abs(i - i_hall)         # from the room to the hall
                   + abs(j - j_goal[atype]); # over to the right room
                e += s * energy_per_step[atype];
                moved |.= [i, j];
                es := s * energy_per_step[atype];
            );
        );

        for (i, j <- moved.sort) (
            # from the hall to a space vacated in the room
            k := idx[[i, j]];
            atype := rooms_goal[k];
            s := i - i_hall;
            de := s * energy_per_step[atype];
            e += de;
        );
        e
    );

    path_is_clear := \rooms, hall, [i, j], [i', j'] -> (
        if (i == i_hall) (
            if (j < j') (
                for (jj' <- (j + 1) to j') (
                    k := idx !? [i, jj'];
                    if (k != null and hall[k] != ".") return false;
                );
            ) else (
                for (jj' <- (j - 1) to j' by (-1)) (
                    k := idx !? [i, jj'];
                    if (k != null and hall[k] != ".") return false;
                );
            );
            for (ii' <- (i + 1) to i') (
                k := idx !? [ii', j'];
                if (k != null and rooms[k] != ".") return false;
            );
        ) else (
            assert(i' == i_hall);
            for (ii' <- (i - 1) til i' by (-1)) (
                k := idx !? [ii', j];
                if (k != null and rooms[k] != ".") return false;
            );
            if (j < j') (
                for (jj' <- j to j') (
                    k := idx !? [i', jj'];
                    if (k != null and hall[k] != ".") return false;
                );
            ) else (
                for (jj' <- j to j' by (-1)) (
                    k := idx !? [i', jj'];
                    if (k != null and hall[k] != ".") return false;
                );
            );
        );
        return true;
    );

    next_states := \s -> (
        energy, rooms, hall := s;
        ss' := [];
        
        # From rooms to hall
        for (j <- j_rooms) (
            to_move := null;
            atype := null;
            for (i <- i_rooms) (
                k := idx[[i, j]];
                if (rooms[k] == ".") continue;
                if (rooms[k] != rooms_goal[k]) (
                    to_move = i;
                    atype = rooms[k];
                    break;
                );
                for (ii <- i + 1 to i_rooms[-1]) (
                    kk := idx[[ii, j]];
                    if (rooms[kk] != rooms_goal[kk]) (
                        to_move = i;
                        atype = rooms[k];
                        break;
                    );
                );
                if (to_move != null) (
                    break;
                );
            );
            if (to_move == null) continue;
            i := to_move;
            k := idx[[i, j]];

            for (j' <- j_hall) (
                i' := i_hall;
                if (not(path_is_clear(rooms, hall, [i, j], [i', j']))) continue;
                d' := abs(j' - j) + abs(j_goal[atype] - j');

                # Old energy estimate for movement through the hall
                d := abs(j_goal[atype] - j);
                e := d * energy_per_step[atype];
                e' := d' * energy_per_step[atype];
                energy' := energy - e + e';

                k' := idx[[i', j']];
                rooms' := rooms;
                hall' := hall;
                rooms'[k] = ".";
                hall'[k'] = atype;
                ss' append= [energy', rooms', hall'];
            );
        );

        # From hall to rooms
        for (j <- j_hall) (
            i := i_hall;
            k := idx[[i, j]];
            atype := hall[k];
            if (atype == ".") continue;

            i' := null;
            j' := j_goal[atype];
            for (gi' <- i_rooms.reverse) (
                k' := idx[[gi', j']];
                if (rooms[k'] == ".") (
                    i' = gi';
                    break;
                ) else if (rooms[k'] != atype) (
                    # Blocker
                    break;
                );
            );
            if (i' == null) continue;

            if (not(path_is_clear(rooms, hall, [i, j], [i', j']))) continue;

            # The energy estimate doesn't change -- we've already updated it
            # based on the hall location.
            energy' := energy;

            k' := idx[[i', j']];
            rooms' := rooms;
            hall' := hall;
            rooms'[k'] = atype;
            hall'[k] = ".";
            s' := [energy', rooms', hall'];
            ss' append= s';
        );

        ss'
    );

    s0 := [
        estimate_energy(rooms0),
        rooms0,
        "." $* len(j_hall),
    ];

    max_energy := 0;
    q := [s0];
    visited := {s0[1:]};
    while (q) (
        s := q[0];
        q = heappop(q);
        dprint(F"next off queue: {display(s)}");

        energy, rooms, hall := s;
        if (energy > max_energy) (
            max_energy = energy;
            print(energy);
        );

        if (rooms == rooms_goal) (
            return energy;
        );

        for (s' <- next_states(s)) (
            if (s'[1:] in visited) continue;
            visited |.= s'[1:];
            q heappush= s';
        );
    );
);

ifile := getenv("INPUT") or "in23.txt";
ans := solve(ifile);
print(ans);

# 12s
