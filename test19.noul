#!/usr/bin/env noulith

xs := [
    V(-892,524,684     ),
    V(-876,649,763     ),
    V(-838,591,734     ),
    V(-789,900,-551    ),
    V(-689,845,-530    ),
    V(-661,-816,-575   ), # 1
    V(-618,-824,-621   ), # 1
    V(-584,868,-557    ),
    V(-537,-823,-458   ), # 1
    V(-485,-357,347    ), # 1
    V(-447,-329,318    ), # 1
    V(-345,-311,381    ), # 1
    V(7,-33,-71        ),
    V(390,-675,-793    ), # 1
    V(404,-588,-901    ), # 1
    V(423,-701,434     ), # 1
    V(443,580,662      ),
    V(455,729,728      ),
    V(459,-707,401     ), # 1
    V(474,580,667      ),
    V(528,-643,409     ), # 1
    V(544,-627,-890    ), # 1
    V(553,345,-567     ),
    V(564,392,-477     ),
    V(630,319,-379     ),
];

xs' := [
    V(-500,-761,534  ),
    V(-476,619,847   ), # 1
    V(-466,-666,-811 ),
    V(-460,603,-452  ), # 1
    V(-429,-592,574  ),
    V(-391,539,-444  ), # 1
    V(-364,-763,-893 ),
    V(-355,545,-477  ), # 1
    V(-340,-569,-846 ),
    V(-336,658,858   ), # 1
    V(-328,-685,520  ),
    V(-322,571,750   ), # 1
    V(95,138,22      ),
    V(413,935,-424   ), # 1
    V(515,917,-361   ), # 1
    V(553,889,-390   ), # 1
    V(567,-361,727   ),
    V(586,-435,557   ),
    V(605,423,415    ), # 1
    V(669,-402,600   ),
    V(686,422,578    ), # 1
    V(703,-491,-529  ),
    V(729,430,532    ), # 1
    V(755,-354,-619  ),
    V(807,-499,-711  ),
];

xset := for (x <- xs) yield x: null;
for (p <- permutations([0, 1, 2]); s <- [1, (-1)] ^^ 3) (
    ys := xs' map (\x' -> V(s[0] * x'[p[0]], s[1] * x'[p[1]], s[2] * x'[p[2]]));

    offsets := {};
    for (x <- xs; y <- ys) (
        d := x - y;
        offsets[d] = 1 + (offsets !? d or 0);
    );
    polyoff := {};
    for (d, k <<- offsets) (
        if (k > 1)
            polyoff[d] = k;
    );
    print(F"{p} {s} {polyoff}");
);

#xs = xs map (_[0]) then sort;
#xs' = xs' map (_[0]) then sort;
#
#dists := {};
#for (i <- 0 til len(xs); j <- i + 1 til len(xs)) (
#    d := xs[j] - xs[i];
#    dists[d] = null;
#);
#    
#dists' := {};
#for (i <- 0 til len(xs'); j <- i + 1 til len(xs')) (
#    d := xs'[j] - xs'[i];
#    dists'[d] = null;
#);
#
#print(dists && dists');
#print(len(dists && dists'));
    
#vx := vector(xs);
#vx' := vector(xs');
#ds := vx[1:] - vx[:-1];
#ds' := vx'[1:] - vx'[:-1];
#for (i, x <<- xs) (
#    print(x, if (i == 0) "NA" else ds[i-1]);
#);
#print();
#for (j, x' <<- xs') (
#    print(x', if (j == 0) "NA" else ds'[j-1]);
#);

#(
xs[0] or -892 == xs'[1] or -476 - 416
xs[1] or -876 == xs[0] + 16
xs'[3] or -460 == xs'[1] + 16
xs[1] or -876 == xs
)

#(
-892 NA    -500 NA 
-876 16    -476 24 
-838 38    -466 10 
-789 49    -460 6  
-689 100   -429 31 
-661 28    -391 38 
-618 43    -364 27 
-584 34    -355 9  
-537 47    -340 15 
-485 52    -336 4  
-447 38    -328 8  
-345 102   -322 6  
7 352      95 417  
390 383    413 318 
404 14     515 102 
423 19     553 38  
443 20     567 14  
455 12     586 19  
459 4      605 19  
474 15     669 64  
528 54     686 17  
544 16     703 17  
553 9      729 26  
564 11     755 26  
630 66     807 52  
)

#(
        -50 -47* -46 -46* -42 -39* -36 -35* -34 -33* -32 -32* 9 41* 51* 55* 56 58 60* 66 68* 70 72* 75 80
   -89
   -87
   -83
   -78
   -68
  *-66
  *-61
   -58
  *-53
  *-48
  *-44
  *-34
   7
  *39
  *40
  *42
   44
  *45
   47
  *52
  *54
   55
   56
   63
)
